{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isArray.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/filterOutFalsy.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/utils/isPrimitive.ts","../../src/logic/getFieldsValues.ts","../../src/utils/deepMerge.ts","../../src/utils/deepEqual.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getFieldArrayParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx","../node_modules/react-bootstrap/esm/FormContext.js","../node_modules/react-bootstrap/esm/FormGroup.js"],"names":["_createForOfIteratorHelper","o","Symbol","iterator","Array","isArray","unsupportedIterableToArray","i","F","s","n","length","done","value","e","_e","f","TypeError","it","err","normalCompletion","didErr","step","next","_e2","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","Date","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","lastIndex","key","newValue","objValue","isObject","isNaN","data","Object","entries","reduce","previous","val","undefined","filter","Boolean","obj","defaultValue","filterOutFalsy","split","isUndefined","fields","fieldErrors","get","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","current","disabled","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","isCheckBoxInput","forEach","removeAllEventListeners","setFieldArrayDirtyFields","defaultValues","dirtyFields","parentName","search","output","isString","startsWith","find","deepMerge","target","source","isPrimitive","targetValue","sourceValue","deepEqual","object1","object2","isErrorObject","keys1","keys2","includes","val1","val2","isErrorStateChanged","errors","error","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","message","getValidateError","validateAllFieldCriteria","types","a","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","requiredValue","requiredMessage","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","exceedMin","valueDate","valueAsDate","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","validateError","validationResult","validateFunction","validateResult","getPath","pathWithIndex","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","mode","isOnSubmit","isWindowUndefined","isWeb","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","watchFieldsRef","Set","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","shouldRenderBaseOnError","shouldRender","shouldReRender","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","isFormDirty","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","isFieldWatched","renderWatchedInputs","found","size","getFieldArrayParentName","setValue","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","skipValidation","validateResolver","removeFieldEventListener","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","watch","unregister","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","isSelectInput","register","refOrValidationOptions","rules","handleSubmit","onValid","onInvalid","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","control","prop","FormContext","React.createContext","displayName","React","createContext","controlId","FormGroup","forwardRef","_ref","bsPrefix","className","children","_ref$as","as","Component","props","_objectWithoutPropertiesLoose","useBootstrapPrefix","useMemo","createElement","Provider","_extends","classNames"],"mappings":"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","file":"static/js/0.6c1b8aca.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): string[] => {\n  const result: string[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport filterOutFalsy from './filterOutFalsy';\n\nexport default (obj: any, path: string, defaultValue?: unknown) => {\n  const result = filterOutFalsy(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport filterOutFalsy from '../utils/filterOutFalsy';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      set(shallowFieldsStateRef.current, name, value);\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      filterOutFalsy(options).forEach((option, index): void => {\n        const { ref } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !filterOutFalsy(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import { get } from '../utils';\nimport isArray from '../utils/isArray';\nimport set from '../utils/set';\n\nexport default function setFieldArrayDirtyFields<\n  T extends U,\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setFieldArrayDirtyFields(\n          values[index][key],\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n    !dirtyFields.length &&\n      parentNode &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields.length ? dirtyFields : undefined;\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return deepMerge(\n    transformToNestObject({ ...((shallowFieldsStateRef || {}).current || {}) }),\n    transformToNestObject(output),\n  );\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      if (\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (isArray(targetValue) && isArray(sourceValue))\n      ) {\n        target[key] = deepMerge(targetValue, sourceValue);\n      } else {\n        target[key] = sourceValue;\n      }\n    } catch {}\n  }\n\n  return target;\n}\n","import isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\n\nexport default function deepEqual(\n  object1: any = [],\n  object2: any = [],\n  isErrorObject?: boolean,\n) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    if (!(isErrorObject && ['ref', 'context'].includes(key))) {\n      const val1 = object1[key];\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || isArray(val1)) && (isObject(val2) || isArray(val2))\n          ? !deepEqual(val1, val2, isErrorObject)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default function isErrorStateChanged<TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n}\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? (((fields[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\n\nexport const getPath = <T extends string, U extends object | unknown[]>(\n  path: T,\n  values: U,\n): string[] => {\n  const getInnerPath = <K>(key: K, value: U, isObject?: boolean) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(key, value, isObject(values)))\n    .flat(Infinity) as string[];\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport filterOutFalsy from './utils/filterOutFalsy';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<\n    Record<string, InternalNameSet<TFieldValues>>\n  >({});\n  const useWatchRenderFunctionsRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const defaultValuesAtRenderRef = React.useRef<\n    Partial<DefaultValues<TFieldValues>>\n  >({});\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef(\n    shouldUnregister ? {} : { ...defaultValues },\n  );\n  const resetFieldArrayFunctionRef = React.useRef<\n    Record<\n      InternalFieldName<FieldValues>,\n      (data?: UnpackNestedValue<DeepPartial<TFieldValues>>) => void\n    >\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) =>\n      !isUnMount.current &&\n      setFormState({\n        ...formStateRef.current,\n        ...state,\n      }),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          errors: formStateRef.current.errors,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: string,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | string[]\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = () =>\n    !deepEqual(\n      getValues(),\n      isEmptyObject(defaultValuesRef.current)\n        ? defaultValuesAtRenderRef.current\n        : defaultValuesRef.current,\n    ) || !isEmptyObject(formStateRef.current.dirtyFields);\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): {\n      dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    } => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty =\n          get(defaultValuesAtRenderRef.current, name) !==\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        if (isChanged && shouldRender) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...state,\n          };\n          updateFormState({\n            ...state,\n          });\n        }\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = (\n          await validateField<TFieldValues>(\n            fieldsRef,\n            isValidateAllFieldCriteria,\n            fieldsRef.current[name] as Field,\n            shallowFieldsStateRef,\n          )\n        )[name];\n\n        shouldRenderBaseOnError(name, error, skipReRender);\n\n        return isUndefined(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          errors: formStateRef.current.errors,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields, readFormStateRef.current.isValid);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    <T extends string, U extends object | unknown[]>(\n      name: T,\n      value: U,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig = {},\n    ) => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          fieldArrayDefaultValuesRef.current[name] = value;\n          resetFieldArrayFunctionRef.current[name]({\n            [name]: value,\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            readFormStateRef.current.isDirty ||\n            readFormStateRef.current.dirtyFields\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n              dirtyFields: formStateRef.current.dirtyFields,\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: TFieldValue extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value as TFieldValues[string], config);\n\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n    (config || {}).shouldValidate && trigger(name as any);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n\n            error = get(errors, name);\n\n            isValid = isEmptyObject(errors);\n\n            if (previousFormIsValid !== isValid) {\n              shouldRender = true;\n            }\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !data[value]) {\n          data = {\n            ...data,\n            [value]: [],\n          };\n        }\n      }\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(fieldsRef, shallowFieldsStateRef),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !filterOutFalsy(field.options || []).length) {\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            errors: formStateRef.current.errors,\n            isDirty: isFormDirty(),\n            dirtyFields: formStateRef.current.dirtyFields,\n          });\n\n          resolverRef.current && validateResolver();\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName]\n          ? isKey(inputName)\n            ? delete formStateRef.current.errors[inputName]\n            : set(formStateRef.current.errors, inputName, undefined)\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n      errors: formStateRef.current.errors,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        shallowFieldsStateRef,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          filterOutFalsy(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...filterOutFalsy((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(\n        defaultValuesAtRenderRef.current,\n        name,\n        isEmptyDefaultValue\n          ? isObject(fieldValue)\n            ? { ...fieldValue }\n            : fieldValue\n          : defaultValue,\n      );\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(fieldsRef, shallowFieldsStateRef, true),\n      );\n\n      if (readFormStateRef.current.isSubmitting) {\n        updateFormState({\n          isSubmitting: true,\n        });\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(fieldErrors, e));\n          shouldFocusError && focusOnErrorField(fieldsRef.current, fieldErrors);\n        }\n      } finally {\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          errors: formStateRef.current.errors,\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n\n    if (values) {\n      renderWatchedInputs('');\n    }\n\n    shallowFieldsStateRef.current = shouldUnregister ? {} : { ...values } || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n  };\n\n  observerRef.current =\n    observerRef.current || !isWeb\n      ? observerRef.current\n      : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n    resolver && readFormStateRef.current.isValid && validateResolver();\n\n    return () => {\n      isUnMount.current = true;\n      observerRef.current && observerRef.current.disconnect();\n      shallowFieldsStateRef.current = {};\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      fieldsRef.current &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = {\n    renderWatchedInputs,\n    shouldUnregister,\n    removeFieldEventListener,\n    watchInternal,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    fieldArrayDefaultValuesRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    readFormStateRef,\n    formStateRef,\n    defaultValuesRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    validateResolver: resolver ? validateResolver : undefined,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import React from 'react'; // TODO\n\nvar FormContext = React.createContext({\n  controlId: undefined\n});\nexport default FormContext;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useMemo } from 'react';\nimport FormContext from './FormContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar FormGroup = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      children = _ref.children,\n      controlId = _ref.controlId,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"children\", \"controlId\", \"as\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-group');\n  var context = useMemo(function () {\n    return {\n      controlId: controlId\n    };\n  }, [controlId]);\n  return /*#__PURE__*/React.createElement(FormContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n    ref: ref,\n    className: classNames(className, bsPrefix)\n  }), children));\n});\nFormGroup.displayName = 'FormGroup';\nexport default FormGroup;"],"sourceRoot":""}